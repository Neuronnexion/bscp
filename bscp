#!/usr/bin/env python

# Copyright (C) 2012  Volker Grabsch <vog@notjusthosting.com>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

import hashlib
import struct
import subprocess
import sys

remote_script = r'''
import hashlib
import os
import os.path
import struct
import sys

(size, blocksize, filename_len, hashname_len) = struct.unpack('<QQQQ', sys.stdin.read(4 * 8))
filename = sys.stdin.read(filename_len)
hashname = sys.stdin.read(hashname_len)

if not os.path.exists(filename):
    # Create sparse file
    with open(filename, 'wb') as f:
        f.truncate(size)
    os.chmod(filename, 0600)

with open(filename, 'rb+') as f:
    f.seek(0, 2)
    if f.tell() != size:
        raise RuntimeError('Size mismatch (local: %i, remote: %i)' % (size, f.tell()))
    f.seek(0)
    while True:
        block = f.read(blocksize)
        if len(block) == 0:
            break
        digest = hashlib.new(hashname, block).digest()
        sys.stdout.write(digest)
    sys.stdout.flush()
    while True:
        position_s = sys.stdin.read(8)
        if len(position_s) == 0:
            break
        (position,) = struct.unpack('<Q', position_s)
        block = sys.stdin.read(blocksize)
        f.seek(position)
        f.write(block)
    hash_total = hashlib.new(hashname)
    f.seek(0)
    while True:
        block = f.read(blocksize)
        if len(block) == 0:
            break
        hash_total.update(block)
sys.stdout.write(hash_total.digest())
'''

def bscp(local_filename, remote_host, remote_filename, blocksize, hashname):
    hash_total = hashlib.new(hashname)
    with open(local_filename, 'rb') as f:
        f.seek(0, 2)
        size = f.tell()
        f.seek(0)

        # Calculate number of blocks, including the last block which may be smaller
        blockcount = int((size + blocksize - 1) / blocksize)

        remote_command = 'python -c "%s"' % (remote_script,)
        command = ('ssh', '--', remote_host, '--', remote_command)
        p = subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

        p.stdin.write(struct.pack('<QQQQ', size, blocksize, len(remote_filename), len(hashname)))
        p.stdin.write(remote_filename)
        p.stdin.write(hashname)

        remote_digest_list = [p.stdout.read(hash_total.digestsize) for i in xrange(blockcount)]

        for remote_digest in remote_digest_list:
            position = f.tell()
            block = f.read(blocksize)
            hash_total.update(block)
            digest = hashlib.new(hashname, block).digest()
            if digest != remote_digest:
                try:
                    p.stdin.write(struct.pack('<Q', position))
                    p.stdin.write(block)
                except IOError:
                    break
        p.stdin.flush()
        (remote_digest_total, _) = p.communicate(None)
        if remote_digest_total != hash_total.digest():
            raise RuntimeError('Checksum mismatch after transfer')

if __name__ == '__main__':
    try:
        local_filename = sys.argv[1]
        (remote_host, remote_filename) = sys.argv[2].split(':')
        if len(sys.argv) >= 4:
            blocksize = int(sys.argv[3])
        else:
            blocksize = 64 * 1024
        if len(sys.argv) >= 5:
            hashname = sys.argv[4]
        else:
            hashname = 'sha1'
        assert len(sys.argv) <= 5
    except:
        usage = 'bscp SRC HOST:DEST [BLOCKSIZE] [HASH]'
        sys.stderr.write('Usage:\n\n    %s\n\n' % (usage,))
        sys.exit(1)
    bscp(local_filename, remote_host, remote_filename, blocksize, hashname)
